// :::::::::::::::::::::::::
// @ variable :: color :: 오지게 많네 어떻게 해야 효율적으로 정의할것인가...
// :::::::::::::::::::::::::
$mainColor01: #ffdb6f;
$mainColor02: #f48585;
$mainBgColor02: #ffeaec;
$subColor01: #fff3ca;
$subColor01: #ffdfdf;
$empColor01: #e57507;
$empColor02: #e4584b;
$mustColor: #c83030;
$boxShodow02: #f6dbdd;
$errorColor: #f0f;
$txtColor: #3e2e2f;
$subTxtColor01: #c86930;
$subTxtColor02: #ff5f50;
$black: #000;
$white: #fff;
$gray333: #333;
$gray555: #555;
$gray666: #666;
$gray999: #999;
$grayCCC: #ccc;
$grayB3: #b3b3b3;
$grayD3: #d3d3d3;
$grayF1: #f1f1f1;
$grayF3: #f3f3f3;
$gray3E: #3e3e3e;
$grayE6: #e6e6e6;

@mixin itemSize($w, $h) {
	width: $w;
	height: $h;
}
// :::::::::::::::::::::::::
// @ clearfix ::
// :::::::::::::::::::::::::
@mixin clearfix {
	&::after {
		content: '';
		display: block;
		clear: both;
	}
}
// :::::::::::::::::::::::::
// @ Pseudo class base ::
// :::::::::::::::::::::::::
@mixin pseudoBase($display: block) {
	content: '';
	position: absolute;
	display: $display;
}

// :::::::::::::::::::::::::
// @ aBlock ::
// :::::::::::::::::::::::::
@mixin aBlock($block) {
	display: $block;
	width: 100%;
	height: 100%;
}

// :::::::::::::::::::::::::
// @ backgroundImage ::
// [ left | center | right | top | bottom | <length-percentage> ]
// [ contain | cover | auto | <length> | <percentage> ]
// :::::::::::::::::::::::::
@mixin bgImg($p, $s) {
	background-position: $p;
	background-size: $s;
	background-repeat: no-repeat;
	// 아래 쓰면 파폭에서 이미지 깨져보임
	// image-rendering: crisp-edges;
	// image-rendering: -moz-crisp-edges;
	// image-rendering: -webkit-optimize-contrast;
	/* Webkit (non-standard naming)*/
	// -ms-interpolation-mode: nearest-neighbor;
	/* IE (non-standard property) */
}
@mixin bgSprite($p) {
	background-position: $p;
}
@mixin bgItemSize($x, $y) {
	width: $x;
	height: $y;
	background-repeat: no-repeat;
}
// :::::::::::::::::::::::::
// @ flex :: set prop
// :::::::::::::::::::::::::
// Flex display
// flex | inline-flex,
// flex-start | flex-end | center | space-between | space-around,
// flex-start | flex-end | center | baseline | stretch
@mixin displayFlex($display: flex, $justify: center, $align: center) {
	@if $display==flex {
		@include flexbox();
	} @else {
		@include inline-flex();
	}
	@include justify-content($justify);
	@include align-items($align);
}

// :::::::::::::::::::::::::
// @ flex :: Individual prop
// :::::::::::::::::::::::::
// Flexbox display
@mixin flexbox() {
	display: -webkit-box;
	display: -moz-box;
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}

@mixin inline-flex() {
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: -moz-inline-flex;
	display: -ms-inline-flexbox;
	display: inline-flex;
}

// flex
// <positive-number>, initial, auto, or none
@mixin flex($values) {
	-webkit-box-flex: $values;
	-moz-box-flex: $values;
	-webkit-flex: $values;
	-ms-flex: $values;
	flex: $values;
}

// Flex Flow Direction
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction: column) {
	-webkit-flex-direction: $direction;
	-moz-flex-direction: $direction;
	-ms-flex-direction: $direction;
	flex-direction: $direction;
}

// Flex Line Wrapping
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap: wrap) {
	-webkit-flex-wrap: $wrap;
	-moz-flex-wrap: $wrap;
	-ms-flex-wrap: $wrap;
	flex-wrap: $wrap;
}

// Flex Direction and Wrap
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
	-webkit-flex-flow: $flow;
	-moz-flex-flow: $flow;
	-ms-flex-flow: $flow;
	flex-flow: $flow;
}

// Display Order
// <integer>
@mixin order($val) {
	-webkit-box-ordinal-group: $val;
	-moz-box-ordinal-group: $val;
	-ms-flex-order: $val;
	-webkit-order: $val;
	order: $val;
}

// Flex grow factor
// <number>
@mixin flex-grow($grow) {
	-webkit-flex-grow: $grow;
	-moz-flex-grow: $grow;
	-ms-flex-grow: $grow;
	flex-grow: $grow;
}

// Flex shrink
// <number>
@mixin flex-shrink($shrink) {
	-webkit-flex-shrink: $shrink;
	-moz-flex-shrink: $shrink;
	-ms-flex-shrink: $shrink;
	flex-shrink: $shrink;
}

// Flex basis
// <width>
@mixin flex-basis($width) {
	-webkit-flex-basis: $width;
	-moz-flex-basis: $width;
	-ms-flex-basis: $width;
	flex-basis: $width;
}

// Axis Alignment
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify: center) {
	-webkit-justify-content: $justify;
	-moz-justify-content: $justify;
	-ms-justify-content: $justify;
	justify-content: $justify;
	-ms-flex-pack: $justify;
}

// Packing Flex Lines
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
	-webkit-align-content: $align;
	-moz-align-content: $align;
	-ms-align-content: $align;
	align-content: $align;
}

// Cross-axis Alignment
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align: center) {
	-webkit-align-items: $align;
	-moz-align-items: $align;
	-ms-align-items: $align;
	align-items: $align;
}

// Cross-axis Alignment
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
	-webkit-align-self: $align;
	-moz-align-self: $align;
	-ms-align-self: $align;
	align-self: $align;
}

// :::::::::::::::::::::::::
// @media mixin :: width
// :::::::::::::::::::::::::
$desktop-l-width: 1400px;
$desktop-s-width: 1280px;
$tablet-l-width: 1024px;
$tablet-s-width: 768px;
$mob-l-width: 640px;
$mob-m-width: 425px;
$mob-s-width: 375px;

// PC large :: 1400
@mixin pc-large {
	@media all and (max-width: #{$desktop-l-width}) {
		@content;
	}
}

// PC small :: 1280
@mixin pc-small {
	@media all and (max-width: #{$desktop-s-width}) {
		@content;
	}
}

// Tab large :: 1024
@mixin tab-large {
	@media all and (max-width: #{$tablet-l-width}) {
		@content;
	}
}

// Tab small :: 768
@mixin tab-small {
	@media all and (max-width: #{$tablet-s-width}) {
		@content;
	}
}

// Mob large :: 640
@mixin mob-large {
	@media all and (max-width: #{$mob-l-width}) {
		@content;
	}
}
// Mob mid :: 425
@mixin mob-mid {
	@media all and (max-width: #{$mob-m-width}) {
		@content;
	}
}
// Mob small :: 375
@mixin mob-small {
	@media all and (max-width: #{$mob-s-width}) {
		@content;
	}
}

// :::::::::::::::::::::::::
// @media mixin :: height
// :::::::::::::::::::::::::
$desktop-d-height: 450px;

// PC height default :: 450
@mixin pc-h-default {
	@media all and (max-height: #{desktop-d-height}) {
		@content;
	}
}
